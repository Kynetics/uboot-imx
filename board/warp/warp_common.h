/*
 * Copyright (C) 2013-2014 Freescale Semiconductor, Inc.
 *
 * Author: Fabio Estevam <fabio.estevam@freescale.com>
 *
 * Copyright (C) 2014 O.S. Systems Software LTDA.
 *
 * Author: Otavio Salvador <otavio@ossystems.com.br>
 *
 * Copyright (C) 2014 Kynetics, LLC
 *
 * Backport to 2013.04: Diego Rondini
 *
 * Copyright (C) 2014 Revolution Robotics, Inc.
 *
 * Author: Jacob Postman <jacob@revolution-robotics.com>
 *
 * SPDX-License-Identifier:    GPL-2.0+
 */
#ifndef WARP_COMMON
#define WARP_COMMON

#include <asm/arch/mx6-pins.h>
#include <asm/imx-common/iomux-v3.h>

//#define DEBUG_SSD2805

#define UART_PAD_CTRL  (PAD_CTL_PKE | PAD_CTL_PUE |		\
	PAD_CTL_PUS_100K_UP | PAD_CTL_SPEED_MED |		\
	PAD_CTL_DSE_40ohm   | PAD_CTL_SRE_FAST  | PAD_CTL_HYS | \
	PAD_CTL_LVE )

#define USDHC_PAD_CTRL (PAD_CTL_PKE | PAD_CTL_PUE |		\
	PAD_CTL_PUS_22K_UP  | PAD_CTL_SPEED_LOW |		\
	PAD_CTL_DSE_80ohm   | PAD_CTL_SRE_FAST  | PAD_CTL_HYS | \
	PAD_CTL_LVE)

#define I2C_PAD_CTRL   (PAD_CTL_PUS_100K_UP |                  \
	PAD_CTL_SPEED_MED | PAD_CTL_DSE_40ohm | PAD_CTL_HYS |   \
	PAD_CTL_ODE | PAD_CTL_SRE_FAST | PAD_CTL_LVE)

#define WARP_I2C_PAD_CTRL_3V ( PAD_CTL_SPEED_MED |		\
		PAD_CTL_DSE_34ohm   | PAD_CTL_SRE_FAST  |	\
		PAD_CTL_HYS         | PAD_CTL_ODE)

#define	WARP_GPIO_PAD_CTRL    ( PAD_CTL_SPEED_HIGH | PAD_CTL_DSE_80ohm |    \
                PAD_CTL_SRE_FAST | PAD_CTL_HYS | PAD_CTL_LVE)

#define LCD_PAD_CTRL   ( PAD_CTL_SPEED_HIGH | PAD_CTL_DSE_80ohm |      \
	PAD_CTL_SRE_FAST | PAD_CTL_LVE)

#define BBI2C_PAD_CTRL   (PAD_CTL_PUS_22K_UP |  PAD_CTL_PUE | PAD_CTL_PKE |  \
	PAD_CTL_SPEED_MED | PAD_CTL_DSE_80ohm | PAD_CTL_HYS |   \
	PAD_CTL_ODE | PAD_CTL_SRE_FAST | PAD_CTL_LVE)

// Bit-banged I2C interface
#define BB_I2C_SETTLE_US 250

#define BBI2C_CLK	IMX_GPIO_NR(4, 12) //ECSPI2_SCK
#define BBI2C_DAT	IMX_GPIO_NR(4, 13) //ECSPI2_MOSI

#define BBI2C_ADDR0	IMX_GPIO_NR(4, 14) //ECSPI2_MISO
#define BBI2C_ADDR1	IMX_GPIO_NR(4, 15) //ECSPI2_SS0

#define FXOS8700_I2C_ADDR 0x1E

#define BBI2C_WRITE 	0x00
#define BBI2C_READ  	0x01

// LCD Interface
#define PINID_LCD_DAT0		IMX_GPIO_NR(2, 20)
#define PINID_LCD_DAT1		IMX_GPIO_NR(2, 21)
#define PINID_LCD_DAT2		IMX_GPIO_NR(2, 22)
#define PINID_LCD_DAT3		IMX_GPIO_NR(2, 23)
#define PINID_LCD_DAT4		IMX_GPIO_NR(2, 24)
#define PINID_LCD_DAT5		IMX_GPIO_NR(2, 25)
#define PINID_LCD_DAT6		IMX_GPIO_NR(2, 26)
#define PINID_LCD_DAT7		IMX_GPIO_NR(2, 27)
#define PINID_LCD_DAT8		IMX_GPIO_NR(2, 28)
#define PINID_LCD_DAT9		IMX_GPIO_NR(2, 29)
#define PINID_LCD_DAT10		IMX_GPIO_NR(2, 30)
#define PINID_LCD_DAT11		IMX_GPIO_NR(2, 31)
#define PINID_LCD_DAT12		IMX_GPIO_NR(3, 0)
#define PINID_LCD_DAT13		IMX_GPIO_NR(3, 1)
#define PINID_LCD_DAT14		IMX_GPIO_NR(3, 2)
#define PINID_LCD_DAT15		IMX_GPIO_NR(3, 3)

#define PINID_LCD_RS		IMX_GPIO_NR(2, 19)
#define PINID_LCD_CS		IMX_GPIO_NR(2, 17)
#define PINID_LCD_RD		IMX_GPIO_NR(3, 11)
#define PINID_LCD_WR		IMX_GPIO_NR(2, 15)

#define PINID_MIPI_TE		IMX_GPIO_NR(3, 4)
#define PINID_LCD_RSTN 		IMX_GPIO_NR(3, 7)
#define PINID_LCD_INTN		IMX_GPIO_NR(3, 8)
#define PINID_MIPI_BSYNC	IMX_GPIO_NR(3, 9)
#define PINID_MIPI_RSTN		IMX_GPIO_NR(3, 10)

// PWM CLK output frequency
#define MIPI_CLK_FREQ		33300000

#  define LCDIF_SLOW_FREQDIV	250
#  define LCDIF_FAST_FREQDIV	20
#  define LCDIF_BUS_WIDTH	8
#  define SSD2805_PLL_CLK_FREQ	200000000

static iomux_v3_cfg_t const mcu8080display_pads[] = {
	MX6_PAD_LCD_DAT0__LCDIF_DAT_0 | MUX_PAD_CTRL(LCD_PAD_CTRL),
	MX6_PAD_LCD_DAT1__LCDIF_DAT_1 | MUX_PAD_CTRL(LCD_PAD_CTRL),
	MX6_PAD_LCD_DAT2__LCDIF_DAT_2 | MUX_PAD_CTRL(LCD_PAD_CTRL),
	MX6_PAD_LCD_DAT3__LCDIF_DAT_3 | MUX_PAD_CTRL(LCD_PAD_CTRL),
	MX6_PAD_LCD_DAT4__LCDIF_DAT_4 | MUX_PAD_CTRL(LCD_PAD_CTRL),
	MX6_PAD_LCD_DAT5__LCDIF_DAT_5 | MUX_PAD_CTRL(LCD_PAD_CTRL),
	MX6_PAD_LCD_DAT6__LCDIF_DAT_6 | MUX_PAD_CTRL(LCD_PAD_CTRL),
	MX6_PAD_LCD_DAT7__LCDIF_DAT_7 | MUX_PAD_CTRL(LCD_PAD_CTRL),
	MX6_PAD_LCD_DAT8__LCDIF_DAT_8 | MUX_PAD_CTRL(LCD_PAD_CTRL),
	MX6_PAD_LCD_DAT9__LCDIF_DAT_9 | MUX_PAD_CTRL(LCD_PAD_CTRL),
	MX6_PAD_LCD_DAT10__LCDIF_DAT_10 | MUX_PAD_CTRL(LCD_PAD_CTRL),
	MX6_PAD_LCD_DAT11__LCDIF_DAT_11 | MUX_PAD_CTRL(LCD_PAD_CTRL),
	MX6_PAD_LCD_DAT12__LCDIF_DAT_12 | MUX_PAD_CTRL(LCD_PAD_CTRL),
	MX6_PAD_LCD_DAT13__LCDIF_DAT_13 | MUX_PAD_CTRL(LCD_PAD_CTRL),
	MX6_PAD_LCD_DAT14__LCDIF_DAT_14 | MUX_PAD_CTRL(LCD_PAD_CTRL),
	MX6_PAD_LCD_DAT15__LCDIF_DAT_15 | MUX_PAD_CTRL(LCD_PAD_CTRL),
	// GPIO for LCD_RDX(SSD)/LCD_RD_E(IMX) future rev may switch to hardware LCDIF_RD_E
	MX6_PAD_LCD_DAT23__GPIO_3_11 | MUX_PAD_CTRL(LCD_PAD_CTRL),	// LCD_RDX(SSD)/LCD_RD_E(MX6_Signal)
	MX6_PAD_LCD_CLK__LCDIF_WR_RWN | MUX_PAD_CTRL(LCD_PAD_CTRL),	// LCD_WRX(SSD)/LCD_WR_RWn(MX6_Signal)/
	MX6_PAD_LCD_HSYNC__LCDIF_CS | MUX_PAD_CTRL(LCD_PAD_CTRL), 	// LCD_CSX(SSD)/LCD_CS(MX6_Signal)
	// LCD_RESET as GPIO for LCD_DCX(SSD)/LCD_RS(IMX) future rev may switch to hardware LCDIF_RS
	MX6_PAD_LCD_RESET__GPIO_2_19 | MUX_PAD_CTRL(LCD_PAD_CTRL), 	// LCD_DCX(SSD) LCD_RS(IMX)
	//MX6_PAD_AUD_TXFS__PWM3_PWMO | MUX_PAD_CTRL(LCD_PAD_CTRL),	// temp pwm output test to pad
	//MX6_PAD_AUD_TXFS__GPIO_1_4 | MUX_PAD_CTRL(LCD_PAD_CTRL),
	MX6_PAD_AUD_MCLK__PWM4_PWMO | MUX_PAD_CTRL(LCD_PAD_CTRL),	// LCD_CLK
	MX6_PAD_LCD_DAT16__GPIO_3_4 | MUX_PAD_CTRL(LCD_PAD_CTRL),	// MIPI_TE
	MX6_PAD_LCD_DAT19__GPIO_3_7 | MUX_PAD_CTRL(LCD_PAD_CTRL),	// LCD_RSTn
	MX6_PAD_LCD_DAT20__GPIO_3_8 | MUX_PAD_CTRL(LCD_PAD_CTRL),	// LCD_INTn
	MX6_PAD_LCD_DAT21__GPIO_3_9 | MUX_PAD_CTRL(LCD_PAD_CTRL),	// MIPI_B_SYNC
	MX6_PAD_LCD_DAT22__GPIO_3_10 | MUX_PAD_CTRL(LCD_PAD_CTRL),	// MIPI_RSTn
	// LCDIF_RD_E not currently used. Future rev may use for LCD_RDX(SSD)/LCD_RD_E(IMX6)
};

static iomux_v3_cfg_t const pwm_pads[] = {
	MX6_PAD_AUD_TXFS__PWM3_PWMO | MUX_PAD_CTRL(LCD_PAD_CTRL),	// temp pwm output test to pad
	MX6_PAD_AUD_MCLK__PWM4_PWMO | MUX_PAD_CTRL(LCD_PAD_CTRL),	// LCD_CLK
};

static iomux_v3_cfg_t const uart1_pads[] = {
	MX6_PAD_UART1_TXD__UART1_TXD | MUX_PAD_CTRL(UART_PAD_CTRL),
	MX6_PAD_UART1_RXD__UART1_RXD | MUX_PAD_CTRL(UART_PAD_CTRL),
};

static iomux_v3_cfg_t const usdhc2_pads[] = {
	MX6_PAD_SD2_CLK__USDHC2_CLK | MUX_PAD_CTRL(USDHC_PAD_CTRL),
	MX6_PAD_SD2_CMD__USDHC2_CMD | MUX_PAD_CTRL(USDHC_PAD_CTRL),
	MX6_PAD_SD2_RST__USDHC2_RST | MUX_PAD_CTRL(USDHC_PAD_CTRL),
	MX6_PAD_SD2_DAT0__USDHC2_DAT0 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
	MX6_PAD_SD2_DAT1__USDHC2_DAT1 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
	MX6_PAD_SD2_DAT2__USDHC2_DAT2 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
	MX6_PAD_SD2_DAT3__USDHC2_DAT3 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
	MX6_PAD_SD2_DAT4__USDHC2_DAT4 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
	MX6_PAD_SD2_DAT5__USDHC2_DAT5 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
	MX6_PAD_SD2_DAT6__USDHC2_DAT6 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
	MX6_PAD_SD2_DAT7__USDHC2_DAT7 | MUX_PAD_CTRL(USDHC_PAD_CTRL),
};

static iomux_v3_cfg_t const bbi2c_pads[] = {
	MX6_PAD_ECSPI2_SCLK__GPIO_4_12 | MUX_PAD_CTRL(BBI2C_PAD_CTRL),
	MX6_PAD_ECSPI2_MOSI__GPIO_4_13 | MUX_PAD_CTRL(BBI2C_PAD_CTRL),
	MX6_PAD_ECSPI2_MISO__GPIO_4_14 | MUX_PAD_CTRL(BBI2C_PAD_CTRL),
	MX6_PAD_ECSPI2_SS0__GPIO_4_15 | MUX_PAD_CTRL(BBI2C_PAD_CTRL),
	MX6_PAD_AUD_TXFS__GPIO_1_4  | MUX_PAD_CTRL(BBI2C_PAD_CTRL),
	MX6_PAD_KEY_ROW2__GPIO_3_29  | MUX_PAD_CTRL(BBI2C_PAD_CTRL),
};

static iomux_v3_cfg_t const bbi2c_uncfg_addr[] = {
	MX6_PAD_ECSPI2_MISO__GPIO_4_14,
	MX6_PAD_ECSPI2_SS0__GPIO_4_15,
};

#ifdef CONFIG_USB_EHCI_MX6
static iomux_v3_cfg_t const usb_otg1_pads[] = {
	MX6_PAD_KEY_COL4__USB_USBOTG1_PWR | MUX_PAD_CTRL(NO_PAD_CTRL),
	MX6_PAD_EPDC_PWRCOM__ANATOP_USBOTG1_ID | MUX_PAD_CTRL(NO_PAD_CTRL)
};

static iomux_v3_cfg_t const usb_otg2_pads[] = {
	MX6_PAD_KEY_COL5__USB_USBOTG2_PWR | MUX_PAD_CTRL(NO_PAD_CTRL),
};
#endif // CONFIG_USB_EHCI_MX6

#ifdef CONFIG_IMX_UDC
static iomux_v3_cfg_t const otg_udc_pads[] = {
	(MX6_PAD_EPDC_PWRCOM__ANATOP_USBOTG1_ID | MUX_PAD_CTRL(NO_PAD_CTRL)),
};
#endif // CONFIG_IMX_UDC

#endif // WARP_COMMON
